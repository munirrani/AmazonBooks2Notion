{"version":3,"file":"Client.js","sourceRoot":"","sources":["../../src/Client.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Agent } from 'http';\nimport { URL } from 'url';\nimport { Logger, LogLevel, logLevelSeverity, makeConsoleLogger } from './logging';\nimport { buildRequestError, HTTPResponseError } from './errors'\nimport { pick } from './helpers';\nimport {\n  BlocksChildrenAppendParameters, BlocksChildrenAppendResponse, blocksChildrenAppend,\n  BlocksChildrenListParameters, BlocksChildrenListResponse, blocksChildrenList,\n  DatabasesListParameters, DatabasesListResponse, databasesList,\n  DatabasesQueryResponse, DatabasesQueryParameters, databasesQuery,\n  DatabasesRetrieveParameters, DatabasesRetrieveResponse, databasesRetrieve,\n  PagesCreateParameters, PagesCreateResponse, pagesCreate,\n  PagesRetrieveParameters, PagesRetrieveResponse, pagesRetrieve,\n  PagesUpdateParameters, PagesUpdateResponse, pagesUpdate,\n  UsersListParameters, UsersListResponse, usersList,\n  UsersRetrieveParameters, UsersRetrieveResponse, usersRetrieve,\n  SearchParameters, SearchResponse, search,\n} from './api-endpoints';\n\nimport got, { Got, Options as GotOptions, Headers as GotHeaders, Agents as GotAgents } from 'got';\n\nexport interface ClientOptions {\n  auth?: string;\n  timeoutMs?: number;\n  baseUrl?: string;\n  logLevel?: LogLevel;\n  logger?: Logger;\n  agent?: Agent;\n  notionVersion?: string;\n}\n\nexport interface RequestParameters {\n  path: string;\n  method: Method;\n  query?: QueryParams;\n  body?: Record<string, unknown>;\n  auth?: string;\n}\n\nexport default class Client {\n\n  #auth?: string;\n  #logLevel: LogLevel;\n  #logger: Logger;\n  #got: Got;\n\n  static readonly defaultNotionVersion = '2021-05-13';\n\n  public constructor(options?: ClientOptions) {\n    this.#auth = options?.auth;\n    this.#logLevel = options?.logLevel ?? LogLevel.WARN;\n    this.#logger = options?.logger ?? makeConsoleLogger(this.constructor.name);\n\n    const prefixUrl = (options?.baseUrl ?? 'https://api.notion.com') + '/v1/';\n    const timeout = options?.timeoutMs ?? 60_000;\n    const notionVersion = options?.notionVersion ?? Client.defaultNotionVersion;\n\n    this.#got = got.extend({\n      prefixUrl,\n      timeout,\n      headers: {\n        'Notion-Version': notionVersion,\n        // TODO: update with format appropriate for telemetry, use version from package.json\n        'user-agent': 'notionhq-client/0.1.0',\n      },\n      retry: 0,\n      agent: makeAgentOption(prefixUrl, options?.agent),\n    });\n  }\n\n  /**\n   * Sends a request.\n   *\n   * @param path\n   * @param method\n   * @param query\n   * @param body\n   * @returns\n   */\n  public async request<Response>({ path, method, query, body, auth }: RequestParameters): Promise<Response> {\n    this.log(LogLevel.INFO, 'request start', { method, path });\n\n    // If the body is empty, don't send the body in the HTTP request\n    const json = (body !== undefined && Object.entries(body).length === 0) ? undefined : body;\n\n    try {\n      const response = await this.#got(path, {\n        method,\n        searchParams: query,\n        json,\n        headers: this.authAsHeaders(auth),\n      }).json<Response>();\n\n      this.log(LogLevel.INFO, `request success`, { method, path });\n      return response;\n    } catch (error) {\n      // Build an error of a known type, otherwise throw unexpected errors\n      const requestError = buildRequestError(error);\n      if (requestError === undefined) {\n        throw error;\n      }\n\n      this.log(LogLevel.WARN, `request fail`, { code: requestError.code, message: requestError.message });\n      if (HTTPResponseError.isHTTPResponseError(requestError)) {\n        // The response body may contain sensitive information so it is logged separately at the DEBUG level\n        this.log(LogLevel.DEBUG, `failed response body`, { body: requestError.body });\n      }\n\n      // Throw as a known error type\n      throw requestError;\n    }\n  }\n\n  /*\n   * Notion API endpoints\n   */\n\n  public readonly blocks = {\n    children: {\n      /**\n       * Append block children\n       */\n      append: (args: WithAuth<BlocksChildrenAppendParameters>): Promise<BlocksChildrenAppendResponse> => {\n        return this.request<BlocksChildrenAppendResponse>({\n          path: blocksChildrenAppend.path(args),\n          method: blocksChildrenAppend.method,\n          query: pick(args, blocksChildrenAppend.queryParams),\n          body: pick(args, blocksChildrenAppend.bodyParams),\n          auth: args?.auth,\n        });\n      },\n\n      /**\n       * Retrieve block children\n       */\n      list: (args: WithAuth<BlocksChildrenListParameters>): Promise<BlocksChildrenListResponse> => {\n        return this.request<BlocksChildrenListResponse>({\n          path: blocksChildrenList.path(args),\n          method: blocksChildrenList.method,\n          query: pick(args, blocksChildrenList.queryParams),\n          body: pick(args, blocksChildrenList.bodyParams),\n          auth: args?.auth,\n        });\n      },\n    }\n  }\n\n  public readonly databases = {\n    /**\n     * List databases\n     */\n    list: (args: WithAuth<DatabasesListParameters>): Promise<DatabasesListResponse> => {\n      return this.request<DatabasesListResponse>({\n        path: databasesList.path(),\n        method: databasesList.method,\n        query: pick(args, databasesList.queryParams),\n        body: pick(args, databasesList.bodyParams),\n        auth: args?.auth,\n      });\n    },\n\n    /**\n     * Retrieve a database\n     */\n    retrieve: (args: WithAuth<DatabasesRetrieveParameters>): Promise<DatabasesRetrieveResponse> => {\n      return this.request<DatabasesRetrieveResponse>({\n        path: databasesRetrieve.path(args),\n        method: databasesRetrieve.method,\n        query: pick(args, databasesRetrieve.queryParams),\n        body: pick(args, databasesRetrieve.bodyParams),\n        auth: args?.auth,\n      });\n    },\n\n    /**\n     * Query a database\n     */\n    query: (args: WithAuth<DatabasesQueryParameters>): Promise<DatabasesQueryResponse> => {\n      return this.request<DatabasesQueryResponse>({\n        path: databasesQuery.path(args),\n        method: databasesQuery.method,\n        query: pick(args, databasesQuery.queryParams),\n        body: pick(args, databasesQuery.bodyParams),\n        auth: args?.auth,\n      });\n    },\n  };\n\n  public readonly pages = {\n    /**\n     * Create a page\n     */\n    create: (args: WithAuth<PagesCreateParameters>): Promise<PagesCreateResponse> => {\n      return this.request<PagesCreateResponse>({\n        path: pagesCreate.path(),\n        method: pagesCreate.method,\n        query: pick(args, pagesCreate.queryParams),\n        body: pick(args, pagesCreate.bodyParams),\n        auth: args?.auth,\n      });\n    },\n\n    /**\n     * Retrieve a page\n     */\n    retrieve: (args: WithAuth<PagesRetrieveParameters>): Promise<PagesRetrieveResponse> => {\n      return this.request<PagesRetrieveResponse>({\n        path: pagesRetrieve.path(args),\n        method: pagesRetrieve.method,\n        query: pick(args, pagesRetrieve.queryParams),\n        body: pick(args, pagesRetrieve.bodyParams),\n        auth: args?.auth,\n      });\n    },\n\n    /**\n     * Update page properties\n     */\n    update: (args: WithAuth<PagesUpdateParameters>): Promise<PagesUpdateResponse> => {\n      return this.request<PagesUpdateResponse>({\n        path: pagesUpdate.path(args),\n        method: pagesUpdate.method,\n        query: pick(args, pagesUpdate.queryParams),\n        body: pick(args, pagesUpdate.bodyParams),\n        auth: args?.auth,\n      });\n    },\n  };\n\n  public readonly users = {\n    /**\n     * Retrieve a user\n     */\n    retrieve: (args: WithAuth<UsersRetrieveParameters>): Promise<UsersRetrieveResponse> => {\n      return this.request<UsersRetrieveResponse>({\n        path: usersRetrieve.path(args),\n        method: usersRetrieve.method,\n        query: pick(args, usersRetrieve.queryParams),\n        body: pick(args, usersRetrieve.bodyParams),\n        auth: args?.auth,\n      });\n    },\n\n    /**\n     * List all users\n     */\n    list: (args: WithAuth<UsersListParameters>): Promise<UsersListResponse> => {\n      return this.request<UsersListResponse>({\n        path: usersList.path(),\n        method: usersList.method,\n        query: pick(args, usersList.queryParams),\n        body: pick(args, usersList.bodyParams),\n        auth: args?.auth,\n      });\n    },\n  };\n\n  /**\n   * Search\n   */\n  public search(args: WithAuth<SearchParameters>): Promise<SearchResponse> {\n    return this.request<SearchResponse>({\n      path: search.path(),\n      method: search.method,\n      query: pick(args, search.queryParams),\n      body: pick(args, search.bodyParams),\n      auth: args?.auth,\n    });\n  }\n\n  /**\n   * Emits a log message to the console.\n   *\n   * @param level The level for this message\n   * @param args Arguments to send to the console\n   */\n  private log(level: LogLevel, message: string, extraInfo: Record<string, unknown>) {\n    if (logLevelSeverity(level) >= logLevelSeverity(this.#logLevel)) {\n      this.#logger(level, message, extraInfo);\n    }\n  }\n\n  /**\n   * Transforms an API key or access token into a headers object suitable for an HTTP request.\n   *\n   * This method uses the instance's value as the default when the input is undefined. If neither are defined, it returns\n   * an empty object\n   *\n   * @param auth API key or access token\n   * @returns headers key-value object\n   */\n  private authAsHeaders(auth?: string): GotHeaders {\n    const headers: GotHeaders = {};\n    const authHeaderValue = auth ?? this.#auth;\n    if (authHeaderValue !== undefined) {\n      headers['authorization'] = `Bearer ${authHeaderValue}`;\n    }\n    return headers;\n  }\n}\n\n/*\n * Type aliases to support the generic request interface.\n */\ntype Method = 'get' | 'post' | 'patch';\ntype QueryParams = GotOptions['searchParams'];\n\n\ntype WithAuth<P> = P & { auth?: string };\n\n/*\n * Helper functions\n */\n\nfunction makeAgentOption(prefixUrl: string, agent: Agent | undefined): GotAgents | undefined {\n  if (agent === undefined) {\n    return undefined;\n  }\n  return {\n    [selectProtocol(prefixUrl)]: agent,\n  };\n}\n\nfunction selectProtocol(prefixUrl: string): 'http' | 'https' {\n  const url = new URL(prefixUrl);\n\n  if (url.protocol === 'https:') {\n    return 'https';\n  } else if (url.protocol === 'http:') {\n    return 'http';\n  }\n\n  throw new TypeError(`baseUrl option must begin with \"https://\" or \"http://\"`);\n}\n"]}