{"version":3,"file":"api-endpoints.js","sourceRoot":"","sources":["../../src/api-endpoints.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-empty-interface */\n/**\n * Notion API Endpoints\n *\n * This file contains metadata about each of the API endpoints such as the HTTP method, the parameters, and the types.\n * In the future, the contents of this file will be generated from an API definition.\n */\n\nimport {\n  PaginatedList,\n  PaginationParameters,\n\n  Database,\n  Page,\n  ParentInput,\n  PropertyValue,\n  Block, BlockBase,\n  User, UserBase,\n\n  Filter,\n  Sort,\n  SearchSort,\n  SearchFilter,\n} from './api-types';\n\n// TODO: type assertions to verify that each interface is synchronized to the list of keys in the runtime value below.\n\n// TODO: instead of importing interfaces like BlockBase, should i use a type alias to Block?\n// TODO: need an input version of Block\n\n/*\n * blocks.children.append()\n */\n\ninterface BlocksChildrenAppendPathParameters {\n  block_id: string;\n}\ninterface BlocksChildrenAppendQueryParameters {}\ninterface BlocksChildrenAppendBodyParameters {\n  children: Block[];\n}\n\nexport interface BlocksChildrenAppendParameters extends BlocksChildrenAppendPathParameters, BlocksChildrenAppendQueryParameters, BlocksChildrenAppendBodyParameters {}\nexport interface BlocksChildrenAppendResponse extends BlockBase {}\n\nexport const blocksChildrenAppend = {\n  method: 'patch',\n  pathParams: ['block_id'],\n  queryParams: [],\n  bodyParams: ['children'],\n  path: (p: BlocksChildrenAppendPathParameters) => `blocks/${p.block_id}/children`,\n} as const;\n\n/*\n * blocks.children.list()\n */\n\ninterface BlocksChildrenListPathParameters {\n  block_id: string;\n}\ninterface BlocksChildrenListQueryParameters extends PaginationParameters {}\ninterface BlocksChildrenListBodyParameters {}\n\nexport interface BlocksChildrenListParameters extends BlocksChildrenListPathParameters, BlocksChildrenListQueryParameters, BlocksChildrenListBodyParameters {}\nexport interface BlocksChildrenListResponse extends PaginatedList<Block> {}\n\nexport const blocksChildrenList = {\n  method: 'get',\n  pathParams: ['block_id'],\n  queryParams: ['start_cursor', 'page_size'],\n  bodyParams: [],\n  path: (p: BlocksChildrenListPathParameters) => `blocks/${p.block_id}/children`,\n} as const;\n\n/*\n * databases.list()\n */\n\ninterface DatabasesListPathParameters {}\ninterface DatabasesListQueryParameters extends PaginationParameters {}\ninterface DatabasesListBodyParameters {}\n\nexport interface DatabasesListParameters extends DatabasesListPathParameters, DatabasesListQueryParameters, DatabasesListBodyParameters {}\nexport interface DatabasesListResponse extends PaginatedList<Database> {}\n\nexport const databasesList = {\n  method: 'get',\n  pathParams: [],\n  queryParams: ['start_cursor', 'page_size'],\n  bodyParams: [],\n  path: () => `databases`,\n} as const;\n\n/*\n * databases.query()\n */\n\ninterface DatabasesQueryPathParameters {\n  database_id: string;\n}\ninterface DatabasesQueryQueryParameters {}\ninterface DatabasesQueryBodyParameters extends PaginationParameters {\n  filter?: Filter;\n  sorts?: Sort[];\n}\n\nexport interface DatabasesQueryParameters extends DatabasesQueryPathParameters, DatabasesQueryQueryParameters, DatabasesQueryBodyParameters {}\nexport interface DatabasesQueryResponse extends PaginatedList<Page> {}\n\nexport const databasesQuery = {\n  method: 'post',\n  pathParams: ['database_id'],\n  queryParams: [],\n  bodyParams: ['filter', 'sorts', 'start_cursor', 'page_size'],\n  path: (p: DatabasesQueryPathParameters) => `databases/${p.database_id}/query`,\n} as const;\n\n/*\n * databases.retrieve()\n */\n\ninterface DatabasesRetrievePathParameters {\n  database_id: string;\n}\ninterface DatabasesRetrieveQueryParameters {}\ninterface DatabasesRetrieveBodyParameters {}\n\nexport interface DatabasesRetrieveParameters extends DatabasesRetrievePathParameters, DatabasesRetrieveQueryParameters, DatabasesRetrieveBodyParameters {}\nexport interface DatabasesRetrieveResponse extends Database {}\n\nexport const databasesRetrieve = {\n  method: 'get',\n  pathParams: ['database_id'],\n  queryParams: [],\n  bodyParams: [],\n  path: (p: DatabasesRetrievePathParameters) => `databases/${p.database_id}`,\n} as const;\n\n/*\n * pages.create()\n */\n\ninterface PagesCreatePathParameters {}\ninterface PagesCreateQueryParameters {}\ninterface PagesCreateBodyParameters {\n  parent: ParentInput;\n  properties: { [propertyName: string]: PropertyValue; };\n  children?: Block[];\n}\n\nexport interface PagesCreateParameters extends PagesCreatePathParameters, PagesCreateQueryParameters, PagesCreateBodyParameters {}\nexport interface PagesCreateResponse extends BlockBase {}\n\nexport const pagesCreate = {\n  method: 'post',\n  pathParams: [],\n  queryParams: [],\n  bodyParams: ['parent', 'properties', 'children'],\n  path: () => `pages`,\n} as const\n\n/*\n * pages.retrieve()\n */\n\ninterface PagesRetrievePathParameters {\n  page_id: string;\n}\ninterface PagesRetrieveQueryParameters {}\ninterface PagesRetrieveBodyParameters {}\n\nexport interface PagesRetrieveParameters extends PagesRetrievePathParameters, PagesRetrieveQueryParameters, PagesRetrieveBodyParameters {}\nexport interface PagesRetrieveResponse extends Page {}\n\nexport const pagesRetrieve = {\n  method: 'get',\n  pathParams: ['page_id'],\n  queryParams: [],\n  bodyParams: [],\n  path: (p: PagesRetrievePathParameters) => `pages/${p.page_id}`,\n} as const;\n\n/*\n * pages.update()\n */\n\ninterface PagesUpdatePathParameters {\n  page_id: string;\n}\ninterface PagesUpdateQueryParameters {}\ninterface PagesUpdateBodyParameters {\n  properties: { [propertyNameOrId: string]: PropertyValue; };\n}\n\nexport interface PagesUpdateParameters extends PagesUpdatePathParameters, PagesUpdateQueryParameters, PagesUpdateBodyParameters {}\nexport interface PagesUpdateResponse extends Page {}\n\nexport const pagesUpdate = {\n  method: 'patch',\n  pathParams: ['page_id'],\n  queryParams: [],\n  bodyParams: ['properties'],\n  path: (p: PagesUpdatePathParameters) => `pages/${p.page_id}`,\n} as const;\n\n/*\n * users.retrieve()\n */\n\ninterface UsersRetrievePathParameters {\n  user_id: string;\n}\ninterface UsersRetrieveQueryParameters {}\ninterface UsersRetrieveBodyParameters {}\n\nexport interface UsersRetrieveParameters extends UsersRetrievePathParameters, UsersRetrieveQueryParameters, UsersRetrieveBodyParameters {}\nexport interface UsersRetrieveResponse extends UserBase {}\n\nexport const usersRetrieve = {\n  method: 'get',\n  pathParams: ['user_id'],\n  queryParams: [],\n  bodyParams: [],\n  path: (p: UsersRetrievePathParameters) => `users/${p.user_id}`,\n} as const;\n\n/*\n * users.list()\n */\n\ninterface UsersListPathParameters {}\ninterface UsersListQueryParameters extends PaginationParameters {}\ninterface UsersListBodyParameters {}\n\nexport interface UsersListParameters extends UsersListPathParameters, UsersListQueryParameters, UsersListBodyParameters {}\nexport interface UsersListResponse extends PaginatedList<User> {}\n\nexport const usersList = {\n  method: 'get',\n  pathParams: [],\n  queryParams: ['start_cursor', 'page_size'],\n  bodyParams: [],\n  path: () => `users`,\n} as const;\n\n/*\n * search()\n */\n\ninterface SearchPathParameters {}\ninterface SearchQueryParameters {}\ninterface SearchBodyParameters extends PaginationParameters {\n  query?: string;\n  sort?: SearchSort;\n  filter?: SearchFilter;\n}\n\nexport interface SearchParameters extends SearchPathParameters, SearchQueryParameters, SearchBodyParameters {}\nexport interface SearchResponse extends PaginatedList<Page | Database> {}\n\nexport const search = {\n  method: 'post',\n  pathParams: [],\n  queryParams: [],\n  bodyParams: ['query', 'sort', 'filter', 'start_cursor', 'page_size'],\n  path: () => `search`,\n} as const;\n"]}