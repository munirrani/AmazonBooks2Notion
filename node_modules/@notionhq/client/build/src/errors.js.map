{"version":3,"file":"errors.js","sourceRoot":"","sources":["../../src/errors.ts"],"names":[],"mappings":";;;AAMA,uCAAqC;AAErC,MAAa,mBAAoB,SAAQ,KAAK;IAG5C,YAAY,OAAO,GAAG,qCAAqC;QACzD,KAAK,CAAC,OAAO,CAAC,CAAC;QAHR,SAAI,GAAG,iCAAiC,CAAC;QAIhD,IAAI,CAAC,IAAI,GAAG,qBAAqB,CAAC;IACpC,CAAC;IAED,MAAM,CAAC,qBAAqB,CAAC,KAAc;QACzC,OAAO,CACL,KAAK,YAAY,KAAK;YACtB,KAAK,CAAC,IAAI,KAAK,qBAAqB;YACpC,MAAM,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,mBAAmB,CAAC,SAAS,CAAC,IAAI,CACxE,CAAC;IACJ,CAAC;CACF;AAfD,kDAeC;AAED,MAAa,iBAAkB,SAAQ,KAAK;IAM1C,YAAY,QAAqB,EAAE,OAAgB;QACjD,KAAK,CAAC,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,6CAA6C,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;QAN9E,SAAI,GAAW,gCAAgC,CAAC;QAOvD,IAAI,CAAC,IAAI,GAAG,mBAAmB,CAAC;QAChC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,UAAU,CAAC;QAClC,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;QAChC,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;IAC1C,CAAC;IAED,MAAM,CAAC,mBAAmB,CAAC,KAAc;QACvC,OAAO,CACL,KAAK,YAAY,KAAK;YACtB,KAAK,CAAC,IAAI,KAAK,mBAAmB;YAClC,MAAM,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,iBAAiB,CAAC,SAAS,CAAC,IAAI,CACtE,CAAC;IACJ,CAAC;CACF;AArBD,8CAqBC;AAGD;;GAEG;AACH,IAAY,YAYX;AAZD,WAAY,YAAY;IACtB,6CAA6B,CAAA;IAC7B,0DAA0C,CAAA;IAC1C,mDAAmC,CAAA;IACnC,4CAA4B,CAAA;IAC5B,4CAA4B,CAAA;IAC5B,yDAAyC,CAAA;IACzC,kDAAkC,CAAA;IAClC,oDAAoC,CAAA;IACpC,gDAAgC,CAAA;IAChC,6DAA6C,CAAA;IAC7C,0DAA0C,CAAA;AAC5C,CAAC,EAZW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAYvB;AAUD;;;;GAIG;AACH,MAAa,gBAAiB,SAAQ,iBAAiB;IAGrD,YAAY,QAAqB,EAAE,IAA0B;QAC3D,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAClC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC9B,IAAI,CAAC,IAAI,GAAG,kBAAkB,CAAC;QAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACxB,CAAC;IAED,MAAM,CAAC,kBAAkB,CAAC,KAAc;QACtC,OAAO,CACL,KAAK,YAAY,KAAK;YACtB,KAAK,CAAC,IAAI,KAAK,kBAAkB;YACjC,MAAM,IAAI,KAAK,IAAI,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CACjD,CAAC;IACJ,CAAC;CACF;AAjBD,4CAiBC;AAKD,SAAgB,iBAAiB,CAAC,KAAc;IAC9C,IAAI,iBAAiB,CAAC,KAAK,CAAC,EAAE;QAC5B,OAAO,IAAI,mBAAmB,EAAE,CAAC;KAClC;IACD,IAAI,cAAc,CAAC,KAAK,CAAC,EAAE;QACzB,MAAM,oBAAoB,GAAG,yBAAyB,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC5E,IAAI,oBAAoB,KAAK,SAAS,EAAE;YACtC,OAAO,IAAI,gBAAgB,CAAC,KAAK,CAAC,QAAQ,EAAE,oBAAoB,CAAC,CAAC;SACnE;QACD,OAAO,IAAI,iBAAiB,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;KAC9C;IACD,OAAO;AACT,CAAC;AAZD,8CAYC;AAED,SAAS,yBAAyB,CAAC,IAAa;IAC9C,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;QAC5B,OAAO;KACR;IAED,IAAI,MAAM,CAAC;IACX,IAAI;QACF,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;KAC3B;IAAC,OAAO,UAAU,EAAE;QACnB,OAAO;KACR;IAED,IAAI,CAAC,kBAAQ,CAAC,MAAM,CAAC,IAAI,OAAO,MAAM,CAAC,SAAS,CAAC,KAAK,QAAQ,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE;QACjG,OAAO;KACR;IAED,OAAO;QACL,GAAG,MAAM;QACT,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC;QACpB,OAAO,EAAE,MAAM,CAAC,SAAS,CAAC;KAC3B,CAAC;AACJ,CAAC;AAED;;GAEG;AAEH,SAAS,cAAc,CAAC,IAAa;IACnC,OAAO,OAAO,IAAI,KAAK,QAAQ,IAAI,MAAM,CAAC,MAAM,CAAS,YAAY,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACxF,CAAC;AAED,SAAS,iBAAiB,CAAC,KAAc;IACvC,OAAO,CACL,KAAK,YAAY,KAAK;QACtB,KAAK,CAAC,IAAI,KAAK,cAAc;QAC7B,OAAO,IAAI,KAAK,IAAI,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,QAAQ;QACtD,kBAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAC1B,kBAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAC3B,CAAC;AACJ,CAAC;AAED,SAAS,cAAc,CAAC,KAAc;IACpC,OAAO,CACL,KAAK,YAAY,KAAK;QACtB,KAAK,CAAC,IAAI,KAAK,WAAW;QAC1B,SAAS,IAAI,KAAK,IAAI,kBAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAChD,UAAU,IAAI,KAAK,IAAI,kBAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAClD,SAAS,IAAI,KAAK,IAAI,kBAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CACjD,CAAC;AACJ,CAAC","sourcesContent":["import type { IncomingHttpHeaders } from 'http';\nimport type {\n  HTTPError as GotHTTPError,\n  TimeoutError as GotTimeoutError,\n  Response as GotResponse,\n} from 'got';\nimport { isObject } from './helpers';\n\nexport class RequestTimeoutError extends Error {\n  readonly code = 'notionhq_client_request_timeout';\n\n  constructor(message = 'Request to Notion API has timed out') {\n    super(message);\n    this.name = 'RequestTimeoutError';\n  }\n\n  static isRequestTimeoutError(error: unknown): error is RequestTimeoutError {\n    return (\n      error instanceof Error &&\n      error.name === 'RequestTimeoutError' &&\n      'code' in error && error['code'] === RequestTimeoutError.prototype.code\n    );\n  }\n}\n\nexport class HTTPResponseError extends Error {\n  readonly code: string = 'notionhq_client_response_error';\n  readonly status: number;\n  readonly headers: IncomingHttpHeaders;\n  readonly body: string;\n\n  constructor(response: GotResponse, message?: string) {\n    super(message ?? `Request to Notion API failed with status: ${response.statusCode}`);\n    this.name = 'HTTPResponseError';\n    this.status = response.statusCode;\n    this.headers = response.headers;\n    this.body = response.rawBody.toString();\n  }\n\n  static isHTTPResponseError(error: unknown): error is HTTPResponseError {\n    return (\n      error instanceof Error &&\n      error.name === 'HTTPResponseError' &&\n      'code' in error && error['code'] === HTTPResponseError.prototype.code\n    );\n  }\n}\n\n\n/**\n * Error codes for responses from the API.\n */\nexport enum APIErrorCode {\n  Unauthorized = 'unauthorized',\n  RestrictedResource = 'restricted_resource',\n  ObjectNotFound = 'object_not_found',\n  RateLimited = 'rate_limited',\n  InvalidJSON = 'invalid_json',\n  InvalidRequestURL = 'invalid_request_url',\n  InvalidRequest = 'invalid_request',\n  ValidationError = 'validation_error',\n  ConflictError = 'conflict_error',\n  InternalServerError = 'internal_server_error',\n  ServiceUnavailable = 'service_unavailable',\n}\n\n/**\n * Body of an error response from the API.\n */\ninterface APIErrorResponseBody {\n  code: APIErrorCode;\n  message: string;\n}\n\n/**\n * A response from the API indicating a problem.\n *\n * Use the `code` property to handle various kinds of errors. All its possible values are in `APIErrorCode`.\n */\nexport class APIResponseError extends HTTPResponseError implements APIErrorResponseBody {\n  readonly code: APIErrorCode;\n\n  constructor(response: GotResponse, body: APIErrorResponseBody) {\n    console.log('building the error');\n    super(response, body.message);\n    this.name = 'APIResponseError';\n    this.code = body.code;\n  }\n\n  static isAPIResponseError(error: unknown): error is APIResponseError {\n    return (\n      error instanceof Error &&\n      error.name === 'APIResponseError' &&\n      'code' in error && isAPIErrorCode(error['code'])\n    );\n  }\n}\n\n\ntype RequestError = RequestTimeoutError | HTTPResponseError;\n\nexport function buildRequestError(error: unknown): RequestError | undefined {\n  if (isGotTimeoutError(error)) {\n    return new RequestTimeoutError();\n  }\n  if (isGotHTTPError(error)) {\n    const apiErrorResponseBody = parseAPIErrorResponseBody(error.response.body);\n    if (apiErrorResponseBody !== undefined) {\n      return new APIResponseError(error.response, apiErrorResponseBody);\n    }\n    return new HTTPResponseError(error.response);\n  }\n  return;\n}\n\nfunction parseAPIErrorResponseBody(body: unknown): APIErrorResponseBody | undefined {\n  if (typeof body !== 'string') {\n    return;\n  }\n\n  let parsed;\n  try {\n    parsed = JSON.parse(body);\n  } catch (parseError) {\n    return;\n  }\n\n  if (!isObject(parsed) || typeof parsed['message'] !== 'string' || !isAPIErrorCode(parsed['code'])) {\n    return;\n  }\n\n  return {\n    ...parsed,\n    code: parsed['code'],\n    message: parsed['message'],\n  };\n}\n\n/*\n * Type guards\n */\n\nfunction isAPIErrorCode(code: unknown): code is APIErrorCode {\n  return typeof code === 'string' && Object.values<string>(APIErrorCode).includes(code);\n}\n\nfunction isGotTimeoutError(error: unknown): error is GotTimeoutError {\n  return (\n    error instanceof Error &&\n    error.name === 'TimeoutError' &&\n    'event' in error && typeof error['event'] === 'string' &&\n    isObject(error['request']) &&\n    isObject(error['timings'])\n  );\n}\n\nfunction isGotHTTPError(error: unknown): error is GotHTTPError {\n  return (\n    error instanceof Error &&\n    error.name === 'HTTPError' &&\n    'request' in error && isObject(error['request']) &&\n    'response' in error && isObject(error['response']) &&\n    'timings' in error && isObject(error['timings'])\n  );\n}\n"]}